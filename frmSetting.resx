<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>